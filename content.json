{"meta":{"title":"LYblogs","subtitle":null,"description":"一位勤劳的富侨小技师","author":"LY","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2018-12-21T08:21:35.000Z","updated":"2018-12-21T08:21:35.766Z","comments":true,"path":"categories/index-1.html","permalink":"http://yoursite.com/categories/index-1.html","excerpt":"","text":""},{"title":"ALL_Class","date":"2018-12-21T03:53:04.000Z","updated":"2018-12-21T08:33:13.047Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"ALL_tags","date":"2018-12-21T03:53:04.000Z","updated":"2018-12-21T08:33:32.769Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Django基础","slug":"Django框架","date":"2018-12-29T02:08:56.000Z","updated":"2018-12-29T03:52:31.732Z","comments":true,"path":"2018/12/29/Django框架/","link":"","permalink":"http://yoursite.com/2018/12/29/Django框架/","excerpt":"","text":"更新pip:1python -m pip install -U pip 准备工作(下载): 1pip insatll django pymysql django-redis djangorestframework pillow 检查三方库是否有冲突(兼容性): 1pip check 查看安装了哪些库和库的版本: 1pip freeze 指定下载库版本(默认下载最新版本) 1pip install django==1.11 生成环境和库版本: 1pip freeze &gt; requirements.txt ↑ 输出结果为: 模拟一样的虚拟环境和依赖库: 1pip install -r requirements.txt 1.创建Django项目: 123django-admin startproject hellodjango .# .表示当前路径下# hellodjango 表示django项目名（建议和python项目名一致） 2.运行Django: 1python manage.py runserver 3.将django网页改为中文 打开Django项目下的settings.py文件夹,改为如下字段 12LANGUAGE_CODE = &apos;zh-hans&apos; #en-usTIME_ZONE = &apos;Asia/Chongqing&apos;#UTC 4.连接MySQL数据库 打开Django项目下的settings.py文件夹,修改如下字段 1234567891011DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;hrs&apos;, &apos;HOST&apos;: &apos;localhost&apos;,#阿里云:&apos;47.106.233.124&apos; &apos;PORT&apos;: 3306, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;123456&apos;, &apos;TIME_ZONE&apos;: &apos;Asia/Chongqing&apos;, &#125;&#125; 打开init.py添加如下字段 123import pymysqlpymysql.install_as_MySQLdb() 5.在python的Terminal终端输入如下字段: 1python manage.py migrate 然后你的MySQL数据库会生成如下10张表: 6.在python的Terminal终端输入字段，用来创建超级管理员:12python manage.py createsuperuserpython manage.py runserver #启动Django服务器 总结: 1.通过pycharm创建python项目 —&gt; hellodjango 2.在Terminal的虚拟环境中按照依赖项 3.创建Django项目 —&gt; django-admin startproject hellodjango . 4.运行项目 –&gt; python manage.py runserver 5.修改配置文件settings.py 6.修改 init .py文件 7.生成Django自带数据库 8.创建后台超级管理账号","categories":[{"name":"Django","slug":"Django","permalink":"http://yoursite.com/categories/Django/"}],"tags":[{"name":"Django运行","slug":"Django运行","permalink":"http://yoursite.com/tags/Django运行/"}]},{"title":"redis进阶","slug":"redis提高","date":"2018-12-28T06:36:24.000Z","updated":"2018-12-29T03:51:54.455Z","comments":true,"path":"2018/12/28/redis提高/","link":"","permalink":"http://yoursite.com/2018/12/28/redis提高/","excerpt":"","text":"国内比较好的短信验证平台:又拍云/luosimao/云片短信/SendCloud/互亿无线 python搜索变量的顺序:LEGB 序列化 :把对象转换成字符或字节序列 - 串行化/归档/腌咸菜反序列化 : 把字符或者字节序列还原成对象 - 反串行化 python中要实现对象的序列化和反序列化有三种方案: json - load / loads / dump / dumps - 字符序列pickle - load / loads / dump / dumps - 字节序列 例子:取出省级城市，先去redis数据库里面查询是否有满足条件的数据，如果没有就先去MySQL中取再存入redis数据库方便下次抓取。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import pickleimport pymysqlfrom pymysql.cursors import DictCursorfrom redis import StrictRedisimport timeclass Dept(object): def __init__(self, name): self.name = name def __str__(self): return f'&#123;self.name&#125;' def __repr__(self): return self.namedef main(): begin = time.time() #创建redis数据库连接 cli = StrictRedis(host='47.106.233.124', port=6379, password='123456') #判断provinces键是否存在 if cli.exists('provinces'): #如果存在就直接取出provinces键对应的值（因为存的时候会以序列化存进redis数据库， # 所以需要用loads来反序列化转化为python数据） provinces = pickle.loads(cli.get('provinces')) else: #如果不存在就去MySQL数据库中取 provinces = [] #1.创建数据库连接对象 con = pymysql.connect(host='47.106.233.124', port=3306, database='hrs', charset='utf8', user='root', password='123456') #2.通过连接对象获取游标 try: #游标自动关闭 with con.cursor(cursor=DictCursor) as cursor: #取出满足条件的provinces值 cursor.execute('select name from tb_district where pid is null') for result in cursor.fetchall(): dept=Dept(**result) provinces.append(dept) #并且将数据存入redis数据库（方便下次取出） cli.set('provinces',pickle.dumps(provinces)) finally: #5.关闭连接释放资源 con.close() end = time.time() print(provinces) print(f'结束时间=&#123;end - begin&#125;秒')if __name__ == '__main__': main()","categories":[{"name":"redis进阶","slug":"redis进阶","permalink":"http://yoursite.com/categories/redis进阶/"}],"tags":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/tags/redis/"}]},{"title":"参考资料及一些好用的网站","slug":"参考资料网站","date":"2018-12-27T10:56:36.000Z","updated":"2018-12-29T03:52:24.797Z","comments":true,"path":"2018/12/27/参考资料网站/","link":"","permalink":"http://yoursite.com/2018/12/27/参考资料网站/","excerpt":"redis数据库命令学习 : http://redisdoc.com/","text":"redis数据库命令学习 : http://redisdoc.com/ 模拟分析Python执行过程: http://pythontutor.com/visualize.html#mode=edit python题库:领扣: https://leetcode-cn.com/problemset/all/ 前端框架: http://www.bootcss.com/ 虚拟接口网站: http://rap2.taobao.org/ 虚拟接口用法: http://mockjs.com/ 玩转Linux操作系统: https://github.com/jackfrued/Python-100-Days/blob/master/Day31-35/%E7%8E%A9%E8%BD%ACLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md 数据库问题查找解决方法: https://stackoverflow.com/ 常见Linux指令 (https://www.cnblogs.com/clsn/p/7490611.html)","categories":[{"name":"参考资料","slug":"参考资料","permalink":"http://yoursite.com/categories/参考资料/"}],"tags":[{"name":"参考资料","slug":"参考资料","permalink":"http://yoursite.com/tags/参考资料/"},{"name":"好用的网站","slug":"好用的网站","permalink":"http://yoursite.com/tags/好用的网站/"}]},{"title":"Windows下配置MySQL","slug":"Windows下配置MySQL","date":"2018-12-27T05:16:55.000Z","updated":"2018-12-27T05:40:43.058Z","comments":true,"path":"2018/12/27/Windows下配置MySQL/","link":"","permalink":"http://yoursite.com/2018/12/27/Windows下配置MySQL/","excerpt":"Windows下配置本地MySQL","text":"Windows下配置本地MySQL 第一步 第二步 第三步 第四步 第五步 第六步 第七步 第八步 第九步 第十步","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://yoursite.com/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://yoursite.com/tags/MySQL/"}]},{"title":"SQL基础","slug":"SQL基础","date":"2018-12-24T12:29:36.000Z","updated":"2018-12-29T02:59:16.644Z","comments":true,"path":"2018/12/24/SQL基础/","link":"","permalink":"http://yoursite.com/2018/12/24/SQL基础/","excerpt":"","text":"SQL (结构化查询语言) 分为三组: 1.DDL (数据定义语言): creat(创建)drop(删除)alter（修改） 2.DML (数据操作语言): INSERT(增加数据)DELETE(删除数据)UPDATE(修改数据)SELECT(查找/提出数据) 3.DCL (数据控制语言): GRANTREVOKECOMMITROLLBACK 创建名为srs的数据库1CREATE DATABASE srs DEFAULT charset utf8; -- 默认为Latin1 - iso-8859-1 切换到srs数据库1use srs; 创建二维表来承载数据 如果存在名为tb_student的表就删除它1drop table if EXISTS tb_student 创建学生表tb_student 在学生表中学号可以唯一的标记一条学生记录，我们通常称这样的列为主键列（PRIMARY key）123456789CREATE TABLE tb_student (stuid INT not null COMMENT &quot;学号&quot;,-- 非空约束stuname VARCHAR(10) NOT NULL COMMENT &quot;姓名&quot;, -- 限定最长字符stusex bit DEFAULT 1 COMMENT &quot;性别&quot;, -- bit(比特类型)只能是0|1 (默认为1)stubirth date COMMENT &quot;出生日期&quot;,stuaddr VARCHAR(255) COMMENT &quot;家庭住址&quot;,PRIMARY KEY (stuid)); 修改学生表添加联系方式列1alter TABLE tb_student ADD COLUMN stutel CHAR(11); -- 定长字符串 修改学生表删除联系方式列1ALTER TABLE tb_student DROP COLUMN stutel; 向学生表插入数据123456INSERT INTO tb_student VALUES (1001, &apos;李毅&apos;, 1, &apos;1997-04-28&apos;,&apos;四川成都&apos;);INSERT INTO tb_student VALUES (1002, &apos;王大锤&apos;, 1, &apos;1995-4-8&apos;,&apos;重庆&apos;);INSERT INTO tb_student VALUES (1003, &apos;王小锤&apos;, 1, &apos;1995-4-8&apos;,&apos;重庆&apos;);INSERT INTO tb_student VALUES (1004, &apos;锤锤&apos;, 1, &apos;1997-5-8&apos;,&apos;广州&apos;),(1005, &apos;王老锤&apos;, 1, &apos;1977-4-8&apos;,&apos;北京&apos;),(1006, &apos;白客&apos;, 0, &apos;1988-4-8&apos;,&apos;重庆&apos;); 删除学号在1003到1005之间的学生数据1234DELETE from tb_student WHERE stuid&gt;=1003 and stuid&lt;=1005;DELETE from tb_student WHERE stuid IN (1003,1004,1005);DELETE from tb_student WHERE stuid BETWEEN 1003 and 1005;-- TRUNCATE TABLE tb_student; 截断表（慎用，删库跑路咯！） 更新学号为1002和1004的两个学生的生日123update tb_student set stubirth=&apos;1990-1-1&apos; WHERE stuid=1002 OR stuid=1004;UPDATE tb_student SET stuaddr=NULL WHERE stuid=1004 OR stuid=1005; 更新学号为1002的学生的名字、性别、家庭住址123UPDATE tb_student SET stuname=&apos;王小美&apos;,stusex=0,stuaddr=&apos;四川自贡&apos; WHERE stuid=1002;UPDATE tb_student SET stuaddr=&apos;湖南长沙&apos; WHERE stuaddr is null; 筛选12SELECT * FROM tb_studentSELECT * FROM tb_student WHERE stusex=0; 投影12SELECT stuname,stubirth FROM tb_student;SELECT stuname,stubirth FROM tb_student WHERE stusex=0; 补充: crash course (快速上手)best practice (最佳实践)","categories":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/categories/SQL/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/tags/SQL/"}]},{"title":"redis","slug":"redis数据库","date":"2018-12-24T12:29:36.000Z","updated":"2018-12-28T12:52:42.111Z","comments":true,"path":"2018/12/24/redis数据库/","link":"","permalink":"http://yoursite.com/2018/12/24/redis数据库/","excerpt":"","text":"redis数据库命令jobs –&gt; 查看后台运行任务bg %1 –&gt; 运行后台第一个任务fg %1 –&gt; 让后台第一个任务放到前台来redis-server &amp; –&gt; 直接将任务放在后台运行ctrl+Z –&gt; 将任务放在后台 netstat -nap | grep 6379 –&gt; 查看6379端口被什么任务占用 man netstat – 查看命令帮助 KV存储系统 - REmote Dictionary Server Github – 20000行代码 -&gt; 50000+行Github、Twitter、YouTube提供高速缓存服务 - 缓存热点数据（访问量大数据量不大）缓解了数据库的压力 （高频访问数据不用直接访问数据库） 创建redis服务器 1redis-server --requirepass 123456 --appendonly yes&gt; redis.log 2&gt; redis-error.log&amp; 连接本机服务器: 1redis-cli 连接其他redis服务器: 1redis-cli -h 120.77.222.217 #120.77.222.21（其他服务器的公网ip） Redis 提供了两种持久化数据方案: RDB - 默认开启 AOF - 默认关闭 – appendonly yes redis服务器指令 auth - 验证身份ping - 心跳事件set - 设置键值对get - 取值del - 删除expire - 设置超时事件exists - 判断键是否存在ex 时间（秒）- 存活时间ttl （key）- 查看存活时间expire （key） 时间 - 设置存活时间keys * - 查看所有键flushdb - 清空数据库中所有的键值对flushall - 清除所有数据库中的所有键值对select - 切换底层数据库save /bgsave - 保存数据/后台保存数据shutdown - 关闭服务器 经典数据存储结构:栈(stack) - filo - 先进后出,后进先出 1lpush +lpop / rpus +rpop 例如（递归函数）:1234def f(num): if num in(0,1) return 1 return num * f(num-1) 队列(queue) - FIFO - 先进先出，后进后出 1lpush + rpop / rpush + lpop 主从复制,读写分离: 主人: 1redis-server --requirepass 123123 &gt; redis.log 2&gt; redis-error.log &amp; 奴隶: 1redis-server --slaveof 主人ip 6379（端口号） --masterauth 123456 &gt;redis.log 2&gt;redis-error.log&amp; 退出奴隶: 1slaveof no one 查看服务器配置（跑分）: 1redis-benchmark -a 123123","categories":[{"name":"redis数据库基础","slug":"redis数据库基础","permalink":"http://yoursite.com/categories/redis数据库基础/"}],"tags":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/tags/redis/"},{"name":"基础","slug":"基础","permalink":"http://yoursite.com/tags/基础/"}]},{"title":"数据库","slug":"数据库基础","date":"2018-12-24T01:48:36.000Z","updated":"2018-12-25T13:05:31.754Z","comments":true,"path":"2018/12/24/数据库基础/","link":"","permalink":"http://yoursite.com/2018/12/24/数据库基础/","excerpt":"","text":"数据库 - 实现项目中的数据持久化 数据库的类别: 关系型数据库 - MySQL 特点: 理论基础: 集合论的关系代数 用二维表来组织数据(行 (记录) 和列(字段) ) SQL - 结构化查询语言( Structured query language ) 关系型数据库产品: Oracle - （甲骨文公司） MySQL - （甲骨文公司） - MariaDB DB2、SQLServer、postgreSQL、SQLite 关系型数据库可以保证数据的完整性:1.实体完整性:每条记录都是独一无二的没有冗余 - 主键/唯一索引2.参考完整性(引用完整性):外键3.域完整性: 数据类型、非空约束、默认值约束、检查约束 NoSQL数据库 - Redis MongoDB - 文档数据库 - 适合量大但是价值低的数据 Redis - KV数据库 - 性能好适合做项目中的高速缓存服务 Elasticsearch - 搜索引擎 Linux安装软件 包管理工具 - yum / rpm Docker - 提供虚拟化服务，创建虚拟化容器并按照软件 安装指令:yum -y install docker-io卸载指令:yum -y install docker-io查看指令:yum info …搜索指令:yum search查看是否安装:yum list installed | grep docker Docker服务 启动:systemctl start docker暂停：systemctl stop docker重启:systemctl restart docker查看服务器状态:systemctl status docker开机自启:systemctl enable docker禁用开机自启:systemctl disable docker 使用Docker命令1. 查看已经下载好的镜像文件(安装包):1docker imgaes 2. 下载MySQL的镜像文件:1docker pull mysql:5.7 MySQL数据库超级管理员账号 - root Oracle数据库超级管理员账号 - sys SQLServer数据库超级管理员账号 - sa 3. 创建并运行容器1docker run -d -p 3306:3306 --name mysql57 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7 4. 查看运行中的程序1docker ps 5.安装MySQL客户端工具: Navicat for my SQL - 猫 SQLyog - 海豚 Toad for MySQL - 蛤蟆","categories":[{"name":"数据库基础","slug":"数据库基础","permalink":"http://yoursite.com/categories/数据库基础/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"},{"name":"基础","slug":"基础","permalink":"http://yoursite.com/tags/基础/"}]}]}