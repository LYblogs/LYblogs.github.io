<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Nginx+uwsgi+django项目部署上线]]></title>
    <url>%2F2019%2F01%2F21%2F%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[django项目部署 使用django + uwsgi + Nginx进行部署上线 1.安装MariaDB/mysql安装命令 1yum -y install mariadb mariadb-server 安装完成MariaDB，首先启动MariaDB 1systemctl start mariadb 设置开机启动(可跳过) 1systemctl enable mariadb 2.设置密码命令: mysql_secure_installation 12345678910111213141516171819202122Enter current password for root:&lt;–初次运行直接回车设置密码Set root password? [Y/n] &lt;– 是否设置root用户密码，输入y并回车或直接回车New password: &lt;– 设置root用户的密码Re-enter new password: &lt;– 再输入一次你设置的密码其他配置Remove anonymous users? [Y/n] &lt;– 是否删除匿名用户，回车Disallow root login remotely? [Y/n] &lt;–是否禁止root远程登录,回车,Remove test database and access to it? [Y/n] &lt;– 是否删除test数据库，回车Reload privilege tables now? [Y/n] &lt;– 是否重新加载权限表，回车初始化MariaDB完成，接下来测试登录mysql -u root -p 3.开启远程连接在mysql数据库中的user表中可以看到默认是只能本地连接的，所有可以添加一个新的用户，该用户可以远程访问 1. 创建用户12345678# 先使用数据库use mysql;# 针对ipcreate user &apos;root&apos;@&apos;192.168.10.10&apos; identified by &apos;password&apos;;#全部 create user &apos;root&apos;@&apos;%&apos; identified by &apos;password&apos;; 2. 授权123456789101112# 给用户最大权限grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;password&apos;;# 给部分权限(test 数据库)grant all privileges on test.* to &apos;root&apos;@&apos;%&apos; identified by &apos;password&apos; with grant option;# 刷新权限表flush privileges;# 查看show grants for &apos;root&apos;@&apos;localhost&apos;; 接下来就可以在远程的数据库可视化工具中直接访问该服务器中的mysql了。 12# 访问数据库mysql -u root -p 4.安装python3.6在centos中，系统默认只提供python2.7的版本，但是项目我们使用的python3.6的版本。所有我们自己安装python3 1.安装Python3的方法首先安装依赖包 安装Python3.6所需要的依赖包：12yum -y groupinstall &quot;Development tools&quot;yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel 安装Python3.7还需额外安装依赖包： 1yum install libffi-devel -y 然后根据自己需求下载不同版本的Python3，我下载的是Python3.6.2 12345678wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz然后解压压缩包，进入该目录，安装Python3tar -xvJf Python-3.6.2.tar.xzcd Python-3.6.2./configure --prefix=/usr/local/python3make &amp;&amp; make install 最后创建软链接(为了方便在后面创建虚拟环境选择python版本) 123ln -s /usr/local/python3/bin/python3 /usr/bin/python3ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 5.安装环境在/home路径下添加一下文件夹env → (用于存放虚拟环境)src → (用于存放项目文件)logs → (用于存放日志)conf → (用于存放配置文件) 1. 安装virtualenv1yum install python-virtualenv 2. 创建虚拟环境1virtualenv --no--site-packages -p /usr/local/python3/bin/python3(即上面创建的软连接地址) xxxenv(环境名) 3.同步数据1.通过xftp6 将本地项目文件上传到服务器上2.将本地MySQL数据传输到服务器数据库3.配置虚拟环境需要的的三方库 1234生成环境和库版本:pip freeze &gt; requirements.txt模拟一样的虚拟环境和依赖库:pip install -r requirements.txt 6.测试部署1.urls.py中的修改1234567891011121314151617181920a) 1.修改settings.py配置文件中的DEBUG=False模式2.修改ALLOEWD_HOST=[&apos;*&apos;]b) 修改工程目录下的urls.pyimport re # 导入正则库from django.views.static import serveurlpatterns = [ url(r&apos;^admin/&apos;, admin.site.urls), url(r&apos;^axf/&apos;, include(&apos;axf.urls&apos;, namespace=&apos;axf&apos;)), # 增加以下的url路由（只增加下面两个） re_path(r&apos;^static/(?P&lt;path&gt;.*)$&apos;, serve, &#123;&quot;document_root&quot;: STATICFILES_DIRS[0]&#125;), re_path(r&apos;^media/(?P&lt;path&gt;.*)$&apos;, serve, &#123;&quot;document_root&quot;:MEDIA_ROOT&#125;), url(r&apos;^$&apos;, views.home)] 2.中间件的修改如果中间件是过滤哪些地址不需要登录验证的话，可以设置如下的static和media过滤地址的参数： 12345678# 验证用户的登录状态paths = [&apos;/user/login/&apos;, &apos;/user/register/&apos;, &apos;/axf/market/&apos;, &apos;/axf/marketparams/(\d+)/(\d+)/(\d+)/&apos;, &apos;/static/.*&apos;, &apos;/media/.*&apos;]for path in paths: if re.match(path, request.path): return None 7. 正式环境中部署方式1.安装nginxa）添加nginx存储库 1yum install epel-release b) 安装nginx 1yum install nginx c) 运行nginx Nginx不会自行启动。要运行Nginx 1systemctl start nginx nginx的运行命令： 12systemctl status nginx 查看nginx的状态systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动 2.配置uwsgi在虚拟环境中安装uwsgi，假设虚拟环境安装在/home/env/axfenv中 1/home/env/axfeng/bin/python3/pip3 install uwsgi 3.添加配置文件在/home/conf文件夹下 创建freshnginx.conf文件、freshuwsgi.ini文件 配置freshnginx.conf文件12345678910111213141516171819202122232425server&#123; listen 8000; server_name 47.106.233.124; access_log /home/logs/blogaccess.log; error_log /home/logs/blogerror.log; location / &#123; include uwsgi_params; uwsgi_pass 127.0.0.1:8080; &#125; location /static/ &#123; alias /home/src/blog/static/; &#125; location /media/ &#123; alias /home/src/blog/media/; &#125;&#125; 配置freshuwsgi.ini文件1234567891011121314151617181920[uwsgi]# 守护进程master =true#进程个数processes =4#项目地址chdir =/home/src/fresh_shop#虚拟环境pythonpath = /home/env/freshenv/bin/python3#指定uwsgi文件module = fresh_shop.wsgi# 和Nginx通信地址socket =127.0.0.1:8890#日志文件地址logto =/home/logs/freshuwgi.log 配置/etc/nginx/nginx.conf文件12345678910111213141516171819202122232425262728293031323334include /etc/nginx/conf.d/*.conf;include /home/conf/*.conf;# 第一个程序 server &#123; listen 80; server_name 47.106.233.124:80; root /usr/share/nginx/html; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; uwsgi_pass 127.0.0.1:8890; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; &#125;# 第二个程序（使用同个地址不同端口） server &#123; listen 80; server_name 47.106.233.124:8000; root /usr/share/nginx/html; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; uwsgi_pass 127.0.0.1:8080; &#125; 4.运行项目1/home/env/blogenv/bin/uwsgi --ini /home/conf/bloguwsgi.ini &amp; 项目日志在freshuwsgi.log中查看 1tail -f freshuwsgi.log]]></content>
      <categories>
        <category>项目部署</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django模型]]></title>
    <url>%2F2019%2F01%2F03%2Fdjango%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[ORM（objects relationship mapping）对象关系映射 1.数据库插入数据create()方法12Student.objects.create(s_name=&apos;小明&apos;,s_age=18)return HttpResponse(&apos;创建学生成功！&apos;) save()方法12345stu = Student()stu.s_name = &apos;小j8&apos;stu.s_gender=1stu.save()return HttpResponse(&apos;创建学生成功！&apos;) 2.删除数据123456def del_stu(request): #实现删除 #1. 获取删除的对象 filter(条件) #2. 实现删除方法， delete() Student.objects.filter(id=4).delete() return HttpResponse(&apos;删除学生成功！&apos;) 3.修改数据filter(条件)方法1Student.objects.filter(id=2).update(s_name=&apos;大花&apos;) update()方法1234stu=Student.objects.filter(id=1).first()stu.s_name=&apos;大明&apos;stu.save()return HttpResponse(&apos;更新学生成功!&apos;) 4.查询数据1.精确查询all()查询所有学生信息123stus = Student.objects.all()for stu in stus: print(stu.s_name) filter()方法查询id=5的学生信息12stu = Student.objects.filter(id=2).first()print(stu.s_name) get()方法 1.get()取唯一的一个对象 2.get(条件)条件必须成立注:必须都满足，不然会报错12stu = Student.objects.get(id=2)print(stu) exclude（）方法过滤出不满足条件的信息1234stus = Student.objects.filter(s_gender=1)print(stus)stus = Student.objects.exclude(s_gender=0)print(stus) order_by(字段) - 排序如果加- 就是降序12stus = Student.objects.order_by(&apos;-id&apos;)print(stus) values(字段)方法取出对象中的某个字段12stus = Student.objects.all().values(&apos;s_name&apos;,&apos;s_age&apos;)print(stus) 输出结果:1&lt;QuerySet [&#123;&apos;s_name&apos;: &apos;大明&apos;, &apos;s_age&apos;: 18&#125;, &#123;&apos;s_name&apos;: &apos;大花&apos;, &apos;s_age&apos;: 20&#125;, &#123;&apos;s_name&apos;: &apos;小j8&apos;, &apos;s_age&apos;: 20&#125;]&gt; exists()方法判断查询结果是否存在，返回值是布尔值 12stus = Student.objects.filter(s_name='校长').exists()print(stus) count()方法查看查询结果有多少条数据，返回数字 12stus =Student.objects.filter(s_gender=1).count()print(stus) 2.模糊查询语法: 字段_ _ 运算符 ,返回对象集 contains(包含)包含指定字符12stus = Student.objects.filter(s_name__contains='明').first()print(stus.s_name) startswith(开头)方法以指定字符开头12stus = Student.objects.filter(s_name__startswith='大')print(stus) endswith（结尾）方法以指定字符结尾12stus = Student.objects.filter(s_name__endswith='明')print(stus) in方法查询在某个范围内 123stus = Student.objects.filter(id__in=[1,2,3,4,5,6,7,8])stus = Student.objects.filter(pk__in=[1,2,3,4,5,6,7,8])print(stus) gte gt lt lte(&gt;=,&gt;,&lt;,&lt;=)查询年龄大于等于18且小于21 12stus = Student.objects.filter(s_age__gte=18, s_age__lt=21)print(stus) 查询年龄大于等于18或小于21，Q（）12stus = Student.objects.filter(Q(s_age__gte=18) | Q(s_age__lt=21))print('====',stus) 查询年龄小于18的 12stus = Student.objects.filter(~Q(s_age__gte=18))print(stus) 3.聚合函数Avg(求平均)12age_avg = Student.objects.all().aggregate(Avg('s_age'))print(age_avg) Sum(求和)12age_sum = Student.objects.all().aggregate(Sum('s_age')) print(age_sum) #####Max（求最大值）,Min(求最小值),Count(求数量) 4.Q（） 与运算(&amp;)逻辑与：Q（条件1）,Q（条件2）逻辑与：Q（条件1）&amp;Q（条件2） 或运算(|) 逻辑或：Q（条件1） | Q（条件2） 非运算(~)逻辑非：~Q（条件） 5.F()用于比较两个字段，可以用+，-符号 语法:1模型名.objects.filter(phyiscs__gt=F(&apos;math&apos;)-10)]]></content>
      <tags>
        <tag>django</tag>
        <tag>模型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django框架]]></title>
    <url>%2F2018%2F12%2F29%2FDjango%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[配置虚拟环境更新pip:1python -m pip install -U pip 安装virtualenv:1安装:pip install virtualenv 使用virtualenv1234使用:virtualenv --no-site-packages -p python版本路径\python.exe 虚拟环境名称注: --no-site-packages:表示创建的虚拟环境为纯净的环境 -p:表示虚拟环境中的python版本（如果服务器上只有一个python版本就可以不用写） 准备工作(下载):1pip insatll django pymysql django-redis djangorestframework pillow 检查三方库是否有冲突(兼容性):1pip check 查看安装了哪些三方库和库的版本:12pip freezepip list #查看所有安装的库 指定下载库版本(默认下载最新版本)1pip install django==1.11 生成环境和库版本:1pip freeze &gt; requirements.txt ↑ 输出结果为: 模拟一样的虚拟环境和依赖库:1pip install -r requirements.txt ####激活虚拟环境 12windows:进入到虚拟环境的Scripts 执行activate命令Mac/Linux:进入到虚拟环境的bin 执行source activate命令 Django项目通过命令创建Django项目1django-admin startproject day01 # day01--&gt;项目名称 1.创建Django项目:123django-admin startproject hellodjango .# .表示当前路径下# hellodjango 表示django项目名（建议和python项目名一致） 2.运行Django:1python manage.py runserver 如果需要别人也能远程访问: 1python manage.py runserver 0.0.0.0:80 ps: ip参数:如果为0.0.0.0表示任何人都可以通过公网ip访问django项目 端口port参数:如果端口设置为80,表示该端口在访问时,不用书写 3.将django网页改为中文 打开Django项目下的settings.py文件夹,改为如下字段 12LANGUAGE_CODE = &apos;zh-hans&apos; #en-usTIME_ZONE = &apos;Asia/Chongqing&apos;#UTC 4.连接MySQL数据库 打开Django项目下的settings.py文件夹,修改如下字段 1234567891011DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;hrs&apos;, &apos;HOST&apos;: &apos;localhost&apos;,#阿里云:&apos;47.106.233.124&apos; &apos;PORT&apos;: 3306, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;123456&apos;, &apos;TIME_ZONE&apos;: &apos;Asia/Chongqing&apos;, &#125;&#125; 打开init.py添加如下字段 123import pymysqlpymysql.install_as_MySQLdb() 5.在python的Terminal终端输入如下字段:1python manage.py migrate 然后你的MySQL数据库会生成如下10张表: 6.在python的Terminal终端输入字段，用来创建超级管理员:12python manage.py createsuperuserpython manage.py runserver #启动Django服务器 ####7.增加应用 在一个项目中可以创建多个应用，每个应用进行一种业务 处理1python manage.py startapp 应用名 总结: 1.通过pycharm创建python项目 —&gt; hellodjango 2.在Terminal的虚拟环境中按照依赖项 3.创建Django项目 —&gt; django-admin startproject hellodjango . 4.运行项目 –&gt; python manage.py runserver 5.修改配置文件settings.py 6.修改 init .py文件 7.生成Django自带数据库 8.创建后台超级管理账号 Django模式MVT:MVT模式是由MVC模式演变出来的。 M:models.py ，模型层 V: views.py, 写业务逻辑的地方 T:templates ，模板，定义页面HTML的地方 MVCMVC模式是所有框架遵循的模式。 M:模型层 V:模板 ， HTML页面 C:controller ，控制器，业务逻辑 数据库连接setting.py中配置 USER参数:访问用户 PASSWORD参数:密码 HOST参数:访问数据库地址 PORT参数:访问数据库端口 NAME参数:数据库名 图例: 安装pymysql1.使用pymysql连接数据库:因为python3没有MySQLdb驱动，无法连接MySQL2.在工程目录中的init.py文件中定义 pymysql.install_as_MySQLdb() 迁移第一次迁移1迁移: python manage.py migrate 除开第一次迁移1生成迁移文件:python manage.py makemigrations 1执行迁移文件: python manage.py migrate 插入管理员账号1python manage.py createsuperuser]]></content>
      <categories>
        <category>Django基础与进阶</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>基础</tag>
        <tag>进阶</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis进阶]]></title>
    <url>%2F2018%2F12%2F28%2Fredis%E6%8F%90%E9%AB%98%2F</url>
    <content type="text"><![CDATA[国内比较好的短信验证平台:又拍云/luosimao/云片短信/SendCloud/互亿无线 python搜索变量的顺序:LEGB 序列化 :把对象转换成字符或字节序列 - 串行化/归档/腌咸菜反序列化 : 把字符或者字节序列还原成对象 - 反串行化 python中要实现对象的序列化和反序列化有三种方案: json - load / loads / dump / dumps - 字符序列pickle - load / loads / dump / dumps - 字节序列 例子:取出省级城市，先去redis数据库里面查询是否有满足条件的数据，如果没有就先去MySQL中取再存入redis数据库方便下次抓取。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import pickleimport pymysqlfrom pymysql.cursors import DictCursorfrom redis import StrictRedisimport timeclass Dept(object): def __init__(self, name): self.name = name def __str__(self): return f'&#123;self.name&#125;' def __repr__(self): return self.namedef main(): begin = time.time() #创建redis数据库连接 cli = StrictRedis(host='47.106.233.124', port=6379, password='123456') #判断provinces键是否存在 if cli.exists('provinces'): #如果存在就直接取出provinces键对应的值（因为存的时候会以序列化存进redis数据库， # 所以需要用loads来反序列化转化为python数据） provinces = pickle.loads(cli.get('provinces')) else: #如果不存在就去MySQL数据库中取 provinces = [] #1.创建数据库连接对象 con = pymysql.connect(host='47.106.233.124', port=3306, database='hrs', charset='utf8', user='root', password='123456') #2.通过连接对象获取游标 try: #游标自动关闭 with con.cursor(cursor=DictCursor) as cursor: #取出满足条件的provinces值 cursor.execute('select name from tb_district where pid is null') for result in cursor.fetchall(): dept=Dept(**result) provinces.append(dept) #并且将数据存入redis数据库（方便下次取出） cli.set('provinces',pickle.dumps(provinces)) finally: #5.关闭连接释放资源 con.close() end = time.time() print(provinces) print(f'结束时间=&#123;end - begin&#125;秒')if __name__ == '__main__': main()]]></content>
      <categories>
        <category>redis进阶</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[参考资料及一些好用的网站]]></title>
    <url>%2F2018%2F12%2F27%2F%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[redis数据库命令学习 : http://redisdoc.com/ 模拟分析Python执行过程: http://pythontutor.com/visualize.html#mode=edit python题库:领扣: https://leetcode-cn.com/problemset/all/ 前端框架: http://www.bootcss.com/ 虚拟接口网站: http://rap2.taobao.org/ 虚拟接口用法: http://mockjs.com/ 玩转Linux操作系统: https://github.com/jackfrued/Python-100-Days/blob/master/Day31-35/%E7%8E%A9%E8%BD%ACLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md 数据库问题查找解决方法: https://stackoverflow.com/ 常见Linux指令 (https://www.cnblogs.com/clsn/p/7490611.html) ####课外数据内容: tornado学习网站http://demo.pythoner.com/itt2zh/ch1.html ####课外数据内容: tornado学习网站http://demo.pythoner.com/itt2zh/ch1.html]]></content>
      <categories>
        <category>参考资料</category>
      </categories>
      <tags>
        <tag>参考资料</tag>
        <tag>好用的网站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下配置MySQL]]></title>
    <url>%2F2018%2F12%2F27%2FWindows%E4%B8%8B%E9%85%8D%E7%BD%AEMySQL%2F</url>
    <content type="text"><![CDATA[Windows下配置本地MySQL第一步 第二步 第三步 第四步 第五步 第六步 第七步 第八步 第九步 第十步]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL基础]]></title>
    <url>%2F2018%2F12%2F24%2FSQL%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[SQL (结构化查询语言) 分为三组: 1.DDL (数据定义语言): creat(创建)drop(删除)alter（修改） 2.DML (数据操作语言): INSERT(增加数据)DELETE(删除数据)UPDATE(修改数据)SELECT(查找/提出数据) 3.DCL (数据控制语言): GRANTREVOKECOMMITROLLBACK 创建名为srs的数据库1CREATE DATABASE srs DEFAULT charset utf8; -- 默认为Latin1 - iso-8859-1 切换到srs数据库1use srs; 创建二维表来承载数据 如果存在名为tb_student的表就删除它1drop table if EXISTS tb_student 创建学生表tb_student 在学生表中学号可以唯一的标记一条学生记录，我们通常称这样的列为主键列（PRIMARY key）123456789CREATE TABLE tb_student (stuid INT not null COMMENT &quot;学号&quot;,-- 非空约束stuname VARCHAR(10) NOT NULL COMMENT &quot;姓名&quot;, -- 限定最长字符stusex bit DEFAULT 1 COMMENT &quot;性别&quot;, -- bit(比特类型)只能是0|1 (默认为1)stubirth date COMMENT &quot;出生日期&quot;,stuaddr VARCHAR(255) COMMENT &quot;家庭住址&quot;,PRIMARY KEY (stuid)); 修改学生表添加联系方式列1alter TABLE tb_student ADD COLUMN stutel CHAR(11); -- 定长字符串 修改学生表删除联系方式列1ALTER TABLE tb_student DROP COLUMN stutel; 向学生表插入数据123456INSERT INTO tb_student VALUES (1001, &apos;李毅&apos;, 1, &apos;1997-04-28&apos;,&apos;四川成都&apos;);INSERT INTO tb_student VALUES (1002, &apos;王大锤&apos;, 1, &apos;1995-4-8&apos;,&apos;重庆&apos;);INSERT INTO tb_student VALUES (1003, &apos;王小锤&apos;, 1, &apos;1995-4-8&apos;,&apos;重庆&apos;);INSERT INTO tb_student VALUES (1004, &apos;锤锤&apos;, 1, &apos;1997-5-8&apos;,&apos;广州&apos;),(1005, &apos;王老锤&apos;, 1, &apos;1977-4-8&apos;,&apos;北京&apos;),(1006, &apos;白客&apos;, 0, &apos;1988-4-8&apos;,&apos;重庆&apos;); 删除学号在1003到1005之间的学生数据1234DELETE from tb_student WHERE stuid&gt;=1003 and stuid&lt;=1005;DELETE from tb_student WHERE stuid IN (1003,1004,1005);DELETE from tb_student WHERE stuid BETWEEN 1003 and 1005;-- TRUNCATE TABLE tb_student; 截断表（慎用，删库跑路咯！） 更新学号为1002和1004的两个学生的生日123update tb_student set stubirth=&apos;1990-1-1&apos; WHERE stuid=1002 OR stuid=1004;UPDATE tb_student SET stuaddr=NULL WHERE stuid=1004 OR stuid=1005; 更新学号为1002的学生的名字、性别、家庭住址123UPDATE tb_student SET stuname=&apos;王小美&apos;,stusex=0,stuaddr=&apos;四川自贡&apos; WHERE stuid=1002;UPDATE tb_student SET stuaddr=&apos;湖南长沙&apos; WHERE stuaddr is null; 筛选12SELECT * FROM tb_studentSELECT * FROM tb_student WHERE stusex=0; 投影12SELECT stuname,stubirth FROM tb_student;SELECT stuname,stubirth FROM tb_student WHERE stusex=0; 补充: crash course (快速上手)best practice (最佳实践)]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis]]></title>
    <url>%2F2018%2F12%2F24%2Fredis%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[redis数据库命令jobs –&gt; 查看后台运行任务bg %1 –&gt; 运行后台第一个任务fg %1 –&gt; 让后台第一个任务放到前台来redis-server &amp; –&gt; 直接将任务放在后台运行ctrl+Z –&gt; 将任务放在后台 netstat -nap | grep 6379 –&gt; 查看6379端口被什么任务占用 man netstat – 查看命令帮助 KV存储系统 - REmote Dictionary Server Github – 20000行代码 -&gt; 50000+行Github、Twitter、YouTube提供高速缓存服务 - 缓存热点数据（访问量大数据量不大）缓解了数据库的压力 （高频访问数据不用直接访问数据库） 创建redis服务器 1redis-server --requirepass 123456 --appendonly yes&gt; redis.log 2&gt; redis-error.log&amp; 连接本机服务器: 1redis-cli 连接其他redis服务器: 1redis-cli -h 120.77.222.217 #120.77.222.21（其他服务器的公网ip） Redis 提供了两种持久化数据方案: RDB - 默认开启 AOF - 默认关闭 – appendonly yes redis服务器指令 auth - 验证身份ping - 心跳事件set - 设置键值对get - 取值del - 删除expire - 设置超时事件exists - 判断键是否存在ex 时间（秒）- 存活时间ttl （key）- 查看存活时间expire （key） 时间 - 设置存活时间keys * - 查看所有键flushdb - 清空数据库中所有的键值对flushall - 清除所有数据库中的所有键值对select - 切换底层数据库save /bgsave - 保存数据/后台保存数据shutdown - 关闭服务器 经典数据存储结构:栈(stack) - filo - 先进后出,后进先出 1lpush +lpop / rpus +rpop 例如（递归函数）:1234def f(num): if num in(0,1) return 1 return num * f(num-1) 队列(queue) - FIFO - 先进先出，后进后出 1lpush + rpop / rpush + lpop 主从复制,读写分离: 主人: 1redis-server --requirepass 123123 &gt; redis.log 2&gt; redis-error.log &amp; 奴隶: 1redis-server --slaveof 主人ip 6379（端口号） --masterauth 123456 &gt;redis.log 2&gt;redis-error.log&amp; 退出奴隶: 1slaveof no one 查看服务器配置（跑分）: 1redis-benchmark -a 123123]]></content>
      <categories>
        <category>redis数据库基础</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库]]></title>
    <url>%2F2018%2F12%2F24%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[数据库 - 实现项目中的数据持久化 数据库的类别: 关系型数据库 - MySQL 特点: 理论基础: 集合论的关系代数 用二维表来组织数据(行 (记录) 和列(字段) ) SQL - 结构化查询语言( Structured query language ) 关系型数据库产品: Oracle - （甲骨文公司） MySQL - （甲骨文公司） - MariaDB DB2、SQLServer、postgreSQL、SQLite 关系型数据库可以保证数据的完整性:1.实体完整性:每条记录都是独一无二的没有冗余 - 主键/唯一索引2.参考完整性(引用完整性):外键3.域完整性: 数据类型、非空约束、默认值约束、检查约束 NoSQL数据库 - Redis MongoDB - 文档数据库 - 适合量大但是价值低的数据 Redis - KV数据库 - 性能好适合做项目中的高速缓存服务 Elasticsearch - 搜索引擎 Linux安装软件 包管理工具 - yum / rpm Docker - 提供虚拟化服务，创建虚拟化容器并按照软件 安装指令:yum -y install docker-io卸载指令:yum -y install docker-io查看指令:yum info …搜索指令:yum search查看是否安装:yum list installed | grep docker Docker服务 启动:systemctl start docker暂停：systemctl stop docker重启:systemctl restart docker查看服务器状态:systemctl status docker开机自启:systemctl enable docker禁用开机自启:systemctl disable docker 使用Docker命令1. 查看已经下载好的镜像文件(安装包):1docker imgaes 2. 下载MySQL的镜像文件:1docker pull mysql:5.7 MySQL数据库超级管理员账号 - root Oracle数据库超级管理员账号 - sys SQLServer数据库超级管理员账号 - sa 3. 创建并运行容器1docker run -d -p 3306:3306 --name mysql57 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7 运行容器1docker start mysql57 暂停容器1docker stop mysql57 4. 查看运行中的程序1docker ps 5.安装MySQL客户端工具: Navicat for my SQL - 猫 SQLyog - 海豚 Toad for MySQL - 蛤蟆]]></content>
      <categories>
        <category>数据库基础</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git操作本地仓库与远程仓库以及ssh配置]]></title>
    <url>%2F2018%2F12%2F20%2FplayGit%2F</url>
    <content type="text"><![CDATA[1.创建本地仓库,进入本地仓库对应的空的文件夹a.进入需要做版本控制的文件夹中(空)b.git init在文件夹下添加一个.git的目录(创建仓库) c.在该文件夹下新建一个.py文件(或者其它文件)d.git add 文件(仓库中的文件)将文件添加到缓存区中(添加一个到缓存区中) e.git add -A将当前目录中的所有文件添加到缓存区中 f.git commit -m ‘本次更新的关键信息’g.git status查看工作区是否有修改内容 h.git commit -a -m ‘清空’全部清空的时候,提交版本 i.git reset –hard 3ac18738295a63b37 (返回版本号是3ac18738295a63b37的版本)j.git reset –hard HEAD^ (返回到当前版本的上一个版本)k.git checkout – 文件名从缓存区中恢复工作目录中的内容(让工作区中的指定文件,回到上次提交的位置) 2.将本地仓库连接远程仓库git remote add origin https://gitee.com/gateslee/gitTest.git将本地仓库与远程仓库连接,要现在远程仓库建一个空仓库 git pull -`-`rebase origin master将本地仓库的数据与远程仓库数据同步 git push origin master将本地仓库推送到远程仓库 3.先在远程仓库创建一个仓库,再克隆这个仓库,并获取到本地git clone url(Http的)获得一个本地仓库 然后按照上面的步骤在将工作区间的内容-&gt;缓存区-&gt;本地仓库.git push推送到网上仓库,第一次会需要账号(username),密码 ,如果没有上传上,尝试一下 `git push -f git pull从仓库里获取更新了的文件,如果没有更新,就不会获取(只会获取更新了的文件) 示意图 4.分之操作:1.git branch – 查看分之2.git branch develop – 新建develop分之3.git checkout master – 切换到master分之4.git checkout -b 分之名 –切换并新建分之5.git diff master develop – 查看两个分之的区别6.git merge develop – 将当前分之与develop分之合并注意:切换分之,push,pull,这些操作前要保证工作区间是clean,在git status总查询git向服务器发送文件scp test.py root@120.79.47.68://tmp/fasong2.py(根目录/tmp下)ssh密钥认证1.在主机和从机上执行：ssh-keygen2.在从机上执行: scp id_rsa.pub root@主机地址:~/.ssh/master.pub(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’) 3.在主机中的.ssh文件夹中创建authorized_keys文件： touch authorized_keys4.修改文件authorized_keys的权限: chmod 600 authorized_keys5.将master.pub放进authorized_keys文件中: cat master.pub &gt;&gt; authorized_keys6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>offenUse</tag>
      </tags>
  </entry>
</search>
